{"version":3,"sources":["components/Header.js","keys/api_keys.js","components/Button.js","components/WeatherScreen.js","components/Welcome.js","components/Form.js","components/Geocoding.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","weatherApiKey","Button","props","onClick","console","log","city","onButton","WeatherScreen","apiRespons","Object","keys","length","location","name","country","current","temperature","feelslike","pressure","humidity","cloudcover","visibility","Welcome","Form","require","config","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","a","fetch","then","response","json","setKson","on","type","placeholder","value","onChange","e","target","Geocoding","apiResponse","userCoordinates","setUserCoordinates","userCity","setUserCity","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","responseJson","results","address_components","ShouldBeComponent","home","postal_code","street","region","address","map","component","shouldBe","indexOf","types","short_name","long_name","getAddressObject","App","Client","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JASeA,G,YATA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,4CAAmB,uBACnB,iE,+BCFGC,EADO,mCCoBPC,EAlBA,SAACC,GAWZ,OACI,wBAAQH,UAAU,gBAAgBI,QAVlB,WAChBC,QAAQC,IAAIH,EAAMI,KAAMN,GAEL,KAAfE,EAAMI,MACNJ,EAAMK,YAMV,qBCoBOC,EAjCO,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAGpB,OADAL,QAAQC,IAAI,SAAUI,EAAY,QAASC,OAAOC,KAAKF,GAAYG,QAE/D,8BACoC,IAAnCF,OAAOC,KAAKF,GAAYG,OACrB,sBAAKb,UAAU,iBAAf,UACI,6BAAKU,EAAWI,SAASC,OACzB,4BAAIL,EAAWI,SAASE,UACxB,oBAAGhB,UAAU,cAAb,UAA4BU,EAAWO,QAAQC,YAA/C,WACA,sBAAKlB,UAAU,cAAf,UACE,sBAAKA,UAAU,QAAf,UACE,4CAAc,8BAAIU,EAAWO,QAAQE,UAAvB,cACd,0CAAY,8BAAIT,EAAWO,QAAQG,SAAvB,YACZ,0CAAY,8BAAIV,EAAWO,QAAQI,SAAvB,cAEd,sBAAKrB,UAAU,QAAf,UACE,gDAAkB,8BAAIU,EAAWO,QAAQK,WAAvB,WAClB,4CAAc,8BAAIZ,EAAWO,QAAQM,WAAvB,qBAMxB,sBAAKvB,UAAU,YAAf,UACF,wDACA,+DClBOwB,EATC,WACZ,OACI,sBAAKxB,UAAU,UAAf,UACI,0CACA,oECoDGyB,EAhDF,WAEXC,EAAQ,IAAUC,SAClB,IAHiB,EAM6BC,mBAAS,IANtC,gCAOeA,mBAAS,KAPxB,gCASmBA,mBAAS,KAT5B,mBASVC,EATU,KASEC,EATF,OAUuBF,oBAAS,GAVhC,mBAUVG,EAVU,KAUIC,EAVJ,OAWqBJ,oBAAS,GAX9B,gCAYqBA,mBAAS,KAZ9B,yEAmBjB,4BAAAK,EAAA,6DAEE5B,QAAQC,IAAI,kBAFd,SAGwB4B,MAAM,kDAAD,OAAmDjC,EAAnD,kBAA0E4B,IAAcM,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAHvJ,OAGQC,EAHR,OAIEjC,QAAQC,IAAIgC,EAAQrB,SAEpBe,EAAgBM,GAChBjC,QAAQC,IAAIyB,GAPd,4CAnBiB,sBAgCf,OACI,sBAAK/B,UAAU,YAAYuC,IAAE,EAA7B,UACE,sBAAKvC,UAAU,eAAf,UACE,uBAAOA,UAAU,cACjBwC,KAAK,OACLC,YAAY,qBACZC,MAAOb,EAEPc,SAzBW,SAACC,GAClBd,EAAcc,EAAEC,OAAOH,UAyBjB,cAAC,EAAD,CAAQnC,KAAMsB,EAAYrB,SAzCnB,gDA2CRuB,EAAe,cAAC,EAAD,CAAerB,WAAYqB,IAAkB,cAAC,EAAD,QCkDxDe,G,MAlGG,SAAC,GAAkB,EAAjBC,YAAkB,IAAD,EAIanB,mBAAS,IAJtB,mBAI1BoB,EAJ0B,KAITC,EAJS,OAKDrB,mBAAS,IALR,mBAK1BsB,EAL0B,KAKhBC,EALgB,KAwFjC,OAnBAC,qBAAU,WAVNC,UAAUC,YAAYC,oBAAmB,SAASC,GAG9CP,EAAmB,CAACO,EAASC,OAAOC,SAAUF,EAASC,OAAOE,iBASnE,IAEHP,qBAAU,WAENlB,MAAM,6DAA+Dc,EAAgB,GAAK,IAAMA,EAAgB,GAA1G,gDACGb,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACyB,GACHvD,QAAQC,IAAIsD,EAAaC,SACzBV,EAvEhB,SAA0BW,GAEtB,IAAIC,EAAoB,CACxBC,KAAM,CAAC,iBACPC,YAAa,CAAC,eACdC,OAAQ,CAAC,iBAAkB,SAC3BC,OAAQ,CACJ,8BACA,8BACA,8BACA,8BACA,+BAEJ5D,KAAM,CACF,WACA,cACA,sBACA,sBACA,sBACA,uBAEJS,QAAS,CAAC,YAGNoD,EAAU,CACdJ,KAAM,GACNC,YAAa,GACbC,OAAQ,GACRC,OAAQ,GACR5D,KAAM,GACNS,QAAS,IAgBT,OAZA8C,EAAmBO,KAAI,SAAAC,GACvB,IAAK,IAAIC,KAAYR,GACgD,IAA7DA,EAAkBQ,GAAUC,QAAQF,EAAUG,MAAM,MAEpDL,EAAQG,GADK,YAAbA,EACoBD,EAAUI,WAEVJ,EAAUK,cAM/BP,EAyBiBQ,CAAiBhB,EAAaC,QAAQ,GAAGC,oBAAoBvD,WAGtF,CAAC2C,IAGI,UAARA,EAAuBC,EAAY,QAAU9C,QAAQC,IAAI,QAIrD,qBAAMN,UAAU,cAAhB,SAEe,eAAbkD,GACE,4CAAc,uBAAK,4BAAIA,W,QClEpB2B,GAxBEnD,EAAQ,IAAlBoD,OAIK,WAGV,OAFApD,EAAQ,IAAUC,SAGhB,cAAC,IAAD,CAAYoD,SAAS,IAArB,SACA,qBAAK/E,UAAU,aAAf,SAEE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,OAGA,cAAC,EAAD,aCXOgF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e16804a5.chunk.js","sourcesContent":["const Header = () => {\n    return (\n        <div className=\"header\">\n            <h1>WeatherNow</h1><br/>\n            <h2>Gives current weather info</h2>\n        </div>\n    )\n}\n\nexport default Header; ","\nconst weatherApiKey = 'c055844d5901b82f492d20b14950d9b7';\nexport default weatherApiKey;","\nimport weatherApiKey from '../keys/api_keys';\n\nconst Button = (props) => {\n    \n    const handleClick = () => {\n        console.log(props.city, weatherApiKey);\n\n        if (props.city !== ''){\n            props.onButton();\n        }\n      };\n\n\n    return (\n        <button className=\"search-button\" onClick={handleClick}>\n        Search\n      </button>\n    );\n};\n\nexport default Button;","import React, {useState, useEffect} from \"react\";\n\nconst WeatherScreen = ({apiRespons}) => {\n\n    console.log(\"TEST: \", apiRespons, \"LEN: \", Object.keys(apiRespons).length);\n    return(\n        <div>\n        {Object.keys(apiRespons).length === 3 ? (\n            <div className=\"weather-screen\">\n                <h2>{apiRespons.location.name}</h2>\n                <p>{apiRespons.location.country}</p>\n                <p className=\"temperature\">{apiRespons.current.temperature}&#176;C</p>\n                <div className=\"weather-set\">\n                  <div className=\"set-1\">\n                    <p>Feels like <b>{apiRespons.current.feelslike}&#176;C</b></p>\n                    <p>Pressure <b>{apiRespons.current.pressure} MB</b></p>\n                    <p>Humidity <b>{apiRespons.current.humidity} %</b></p>\n                  </div>\n                  <div className=\"set-2\">\n                    <p>Cloud coverage <b>{apiRespons.current.cloudcover} %</b></p>\n                    <p>Visibility <b>{apiRespons.current.visibility} km</b></p>\n                  </div>\n                </div>\n            </div>\n        \n        ) : (\n          <div className=\"no-result\">\n        <h1>No result ðŸ¤”</h1>\n        <p>Maybe another city name?</p>\n        </div>\n        )}\n      </div>\n    )\n  }\n\nexport default WeatherScreen;","\nconst Welcome = () => {\n    return (\n        <div className=\"welcome\">\n            <h1>Welcome!</h1>\n            <p>Start with choosing the city...</p>\n        </div>\n    )\n}\n\nexport default Welcome;","import React, {useState, useEffect} from \"react\";\nimport Button from './Button'\nimport WeatherScreen from './WeatherScreen'\nimport Welcome from './Welcome'\nimport weatherApiKey from '../keys/api_keys'\n\n\n\n\nconst Form = () => {\n\n  require('dotenv').config()\n  let numberOfApiCalls = 0;\n\n\n  const [userCoordinates, setUserCoordinates] = useState([]);\n  const [userCity, setUserCity] = useState('');\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResult, setSearchResult] = useState(false);\n  const [showWeather, setShowWeather] = useState(false);\n  const [defaultCity, setDefaultCity] = useState('');\n\n\n  const handleChange = (e) => {\n      setSearchTerm(e.target.value);\n  };\n\n  async function apiResponse(){\n    // ========================================= API WORK ================================================================\n    console.log(\"Pressed button\");\n    const setKson = await fetch(`http://api.weatherstack.com/current?access_key=${weatherApiKey}&query=${searchTerm}`).then(response => {return response.json()});\n    console.log(setKson.current);\n    \n    setSearchResult(setKson);\n    console.log(searchResult);\n\n    // +++++++++++++++++++++++++++++++++++++++++ TEST WORK +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    // setSearchResult(NewYorkApiData);\n  }\n\n    return (\n        <div className=\"city-form\" on>\n          <div className=\"search-place\">\n            <input className='input-place'\n            type=\"text\"\n            placeholder=\"Choose the city...\"\n            value={searchTerm}\n\n            onChange={handleChange} />\n            <Button city={searchTerm} onButton={apiResponse}/>\n          </div>\n          {searchResult ? <WeatherScreen apiRespons={searchResult}/> : <Welcome/>}\n        </div>\n    );\n}\n\nexport default Form;","import Geocode from \"react-geocode\";\nimport {useState, useEffect} from 'react';\nimport Button from './Button'\n\nconst Geocoding = ({apiResponse}) => {\n\n    const key = 'AIzaSyA1kw9a2Y4T8krZTVHFhU70rgLkWOp3c6w';\n\n    const [userCoordinates, setUserCoordinates] = useState([]);\n    const [userCity, setUserCity] = useState('');\n\n    // from https://medium.com/@almestaadmicadiab/how-to-parse-google-maps-address-components-geocoder-response-774d1f3375d\n    function getAddressObject(address_components) {\n\n        var ShouldBeComponent = {\n        home: [\"street_number\"],\n        postal_code: [\"postal_code\"],\n        street: [\"street_address\", \"route\"],\n        region: [\n            \"administrative_area_level_1\",\n            \"administrative_area_level_2\",\n            \"administrative_area_level_3\",\n            \"administrative_area_level_4\",\n            \"administrative_area_level_5\"\n        ],\n        city: [\n            \"locality\",\n            \"sublocality\",\n            \"sublocality_level_1\",\n            \"sublocality_level_2\",\n            \"sublocality_level_3\",\n            \"sublocality_level_4\"\n        ],\n        country: [\"country\"]\n        };\n\n        var address = {\n        home: \"\",\n        postal_code: \"\",\n        street: \"\",\n        region: \"\",\n        city: \"\",\n        country: \"\"\n        };\n\n\n        address_components.map(component => {\n        for (var shouldBe in ShouldBeComponent) {\n            if (ShouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n            if (shouldBe === \"country\") {\n                address[shouldBe] = component.short_name;\n            } else {\n                address[shouldBe] = component.long_name;\n            }\n            }\n        }\n        });\n\n        return address;\n    }\n   \n\n    const getCoordinates =() => {\n        navigator.geolocation.getCurrentPosition(function(position) {\n            // console.log(\"Latitude is :\", position.coords.latitude);\n            // console.log(\"Longitude is :\", position.coords.longitude);\n            setUserCoordinates([position.coords.latitude, position.coords.longitude]);\n        });\n        \n        return userCoordinates;\n    };\n\n\n    useEffect(() => {\n        getCoordinates();\n    }, [])\n\n    useEffect(() => {\n\n        fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + userCoordinates[0] + ',' + userCoordinates[1] + '&key=' + key)\n                .then((response) => response.json())\n                .then((responseJson) => {\n                    console.log(responseJson.results);\n                    setUserCity(getAddressObject(responseJson.results[0].address_components).city);\n        })\n\n    }, [userCity])\n\n    // little help for api\n    userCity === `L'viv` ? setUserCity('Lviv') : console.log('fine');\n\n    // this magic city is a default for fetching, so also little help \n    return (\n        <div  className=\"geolocation\">\n            \n        { userCity !== 'Louisville' && (\n            <p>You are in:<br/><b>{userCity}</b></p>)\n        }\n        </div>\n    );\n}\n\nexport default Geocoding;\n","import './App.css';\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport React, {useState, useEffect} from 'react';\nimport Geocoding from './components/Geocoding'\nimport { HashRouter } from \"react-router-dom\";\nconst {Client} = require(\"@googlemaps/google-maps-services-js\");\n\n// const geolocationApiKey = 'AIzaSyCwxpANeKt8AeUyElYdGuzRpVvR6i-_NDE'\n\nconst App = () => {\n  require('dotenv').config()\n  \n  return (\n    <HashRouter basename=\"/\">\n    <div className=\"down-layer\">\n\n      <div className='container'>\n        <div className='heading'>\n        <Header />\n        <Geocoding />\n        </div>\n        {/* <button onClick={Geocoding} className=\"search-button\"> Click </button> */}\n        <Form/>\n      </div>\n    </div>\n    </HashRouter>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}