{"version":3,"sources":["components/Header.js","keys/api_keys.js","components/Button.js","components/WeatherScreen.js","components/Welcome.js","components/Form.js","components/Geocoding.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","weatherApiKey","Button","props","onClick","console","log","city","onButton","WeatherScreen","apiRespons","Object","keys","length","location","name","country","current","temperature","feelslike","pressure","humidity","cloudcover","visibility","Welcome","Form","require","config","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","a","fetch","then","response","json","setKson","on","type","placeholder","value","onChange","e","target","Geocoding","apiResponse","userCoordinates","setUserCoordinates","userCity","setUserCity","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","responseJson","results","address_components","ShouldBeComponent","home","postal_code","street","region","address","map","component","shouldBe","indexOf","types","short_name","long_name","getAddressObject","App","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac929f89.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div className=\"header\">\n      <h1>WeatherNow</h1>\n      <br />\n      <h2>Gives current weather info</h2>\n    </div>\n  );\n};\n\nexport default Header;\n","const weatherApiKey = \"c055844d5901b82f492d20b14950d9b7\";\nexport default weatherApiKey;\n","import weatherApiKey from \"../keys/api_keys\";\n\nconst Button = (props) => {\n  const handleClick = () => {\n    console.log(props.city, weatherApiKey);\n\n    if (props.city !== \"\") {\n      props.onButton();\n    }\n  };\n\n  return (\n    <button className=\"search-button\" onClick={handleClick}>\n      Search\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst WeatherScreen = ({ apiRespons }) => {\n  console.log(\"TEST: \", apiRespons, \"LEN: \", Object.keys(apiRespons).length);\n  return (\n    <div>\n      {Object.keys(apiRespons).length === 3 ? (\n        <div className=\"weather-screen\">\n          <h2>{apiRespons.location.name}</h2>\n          <p>{apiRespons.location.country}</p>\n          <p className=\"temperature\">{apiRespons.current.temperature}&#176;C</p>\n          <div className=\"weather-set\">\n            <div className=\"set-1\">\n              <p>\n                Feels like <b>{apiRespons.current.feelslike}&#176;C</b>\n              </p>\n              <p>\n                Pressure <b>{apiRespons.current.pressure} MB</b>\n              </p>\n              <p>\n                Humidity <b>{apiRespons.current.humidity} %</b>\n              </p>\n            </div>\n            <div className=\"set-2\">\n              <p>\n                Cloud coverage <b>{apiRespons.current.cloudcover} %</b>\n              </p>\n              <p>\n                Visibility <b>{apiRespons.current.visibility} km</b>\n              </p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"no-result\">\n          <h1>No result ðŸ¤”</h1>\n          <p>Maybe another city name?</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WeatherScreen;\n","const Welcome = () => {\n  return (\n    <div className=\"welcome\">\n      <h1>Welcome!</h1>\n      <p>Start with choosing the city...</p>\n    </div>\n  );\n};\n\nexport default Welcome;\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport WeatherScreen from \"./WeatherScreen\";\nimport Welcome from \"./Welcome\";\nimport weatherApiKey from \"../keys/api_keys\";\n\nconst Form = () => {\n  require(\"dotenv\").config();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResult, setSearchResult] = useState(false);\n\n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  async function apiResponse() {\n    // ========================================= API WORK ================================================================\n    console.log(\"Pressed button\");\n    const setKson = await fetch(\n      `http://api.weatherstack.com/current?access_key=${weatherApiKey}&query=${searchTerm}`\n    ).then((response) => {\n      return response.json();\n    });\n    console.log(setKson.current);\n\n    setSearchResult(setKson);\n    console.log(searchResult);\n\n    // +++++++++++++++++++++++++++++++++++++++++ TEST WORK +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    // setSearchResult(NewYorkApiData);\n  }\n\n  return (\n    <div className=\"city-form\" on>\n      <div className=\"search-place\">\n        <input\n          className=\"input-place\"\n          type=\"text\"\n          placeholder=\"Choose the city...\"\n          value={searchTerm}\n          onChange={handleChange}\n        />\n        <Button city={searchTerm} onButton={apiResponse} />\n      </div>\n      {searchResult ? <WeatherScreen apiRespons={searchResult} /> : <Welcome />}\n    </div>\n  );\n};\n\nexport default Form;\n","import { useState, useEffect } from \"react\";\nimport geocodingApiKey from \"../keys/api_keys2\";\n\nconst Geocoding = ({ apiResponse }) => {\n  const [userCoordinates, setUserCoordinates] = useState([]);\n  const [userCity, setUserCity] = useState(\"\");\n\n  // from https://medium.com/@almestaadmicadiab/how-to-parse-google-maps-address-components-geocoder-response-774d1f3375d\n  function getAddressObject(address_components) {\n    var ShouldBeComponent = {\n      home: [\"street_number\"],\n      postal_code: [\"postal_code\"],\n      street: [\"street_address\", \"route\"],\n      region: [\n        \"administrative_area_level_1\",\n        \"administrative_area_level_2\",\n        \"administrative_area_level_3\",\n        \"administrative_area_level_4\",\n        \"administrative_area_level_5\",\n      ],\n      city: [\n        \"locality\",\n        \"sublocality\",\n        \"sublocality_level_1\",\n        \"sublocality_level_2\",\n        \"sublocality_level_3\",\n        \"sublocality_level_4\",\n      ],\n      country: [\"country\"],\n    };\n\n    var address = {\n      home: \"\",\n      postal_code: \"\",\n      street: \"\",\n      region: \"\",\n      city: \"\",\n      country: \"\",\n    };\n\n    address_components.map((component) => {\n      for (var shouldBe in ShouldBeComponent) {\n        if (ShouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n          if (shouldBe === \"country\") {\n            address[shouldBe] = component.short_name;\n          } else {\n            address[shouldBe] = component.long_name;\n          }\n        }\n      }\n    });\n\n    return address;\n  }\n\n  const getCoordinates = () => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setUserCoordinates([position.coords.latitude, position.coords.longitude]);\n    });\n\n    return userCoordinates;\n  };\n\n  useEffect(() => {\n    getCoordinates();\n  }, []);\n\n  useEffect(() => {\n    fetch(\n      \"https://maps.googleapis.com/maps/api/geocode/json?address=\" +\n        userCoordinates[0] +\n        \",\" +\n        userCoordinates[1] +\n        \"&key=\" +\n        geocodingApiKey\n    )\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.log(responseJson.results);\n        setUserCity(\n          getAddressObject(responseJson.results[0].address_components).city\n        );\n      });\n  }, [userCity]);\n\n  // little help for api\n  userCity === `L'viv` ? setUserCity(\"Lviv\") : console.log(\"fine\");\n\n  // this magic city is a default for fetching, so also little help\n  return (\n    <div className=\"geolocation\">\n      {userCity !== \"Louisville\" && (\n        <p>\n          You are in:\n          <br />\n          <b>{userCity}</b>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Geocoding;\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport React from \"react\";\nimport Geocoding from \"./components/Geocoding\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst App = () => {\n  require(\"dotenv\").config();\n\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"down-layer\">\n        <div className=\"container\">\n          <div className=\"heading\">\n            <Header />\n            <Geocoding />\n          </div>\n          <Form />\n        </div>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}